--- arch/configure.defaults	2018-06-08 19:39:31.000000000 -0500
+++ /home/baber/wrf-patches/configure.patched	2018-11-02 13:33:12.344663826 -0500
@@ -1,1967 +1,1033 @@
-###########################################################
-#ARCH    Linux i486 i586 i686,  NEC SX sxf90 sxcc #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       NEC SX ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -Popenmp
-OMPCC           =       # -Popenmp
-SFC             =       sxf90
-SCC             =       sxcc
-CCOMP           =       sxcc
-DM_FC           =       sxmpif90
-DM_CC           =       sxmpic++
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       #-fdefault-real-8
-ARCH_LOCAL      =       -DNEC -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -c  
-#-DNCARIBM_NOC99 -Xa -Kc99
-LDFLAGS_LOCAL   =       -Wl,-h nodefs
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -w -Chopt -Wf'-M noflunf -M nozdiv' -Wf,-L fmtlist transform,-pvctl fullmsg loopcnt=1000000 -f4 -Wf,-P i
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -Cssafe
-FCDEBUG         =       # -g $(FCNOOPT)
-FORMAT_FIXED    =       -w -f3
-FORMAT_FREE     =       -w -f4
-FCSUFFIX        =       
-BYTESWAPIO      =       #-FIX_BYTE_SWAP_IF_NECESSARY_FOR_BIG_ENDIAN
-FCBASEOPTS_NO_G =       -w -Wf'-M noflunf -M nozdiv' $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =      -I/SX/usr/include/module/dwdadW64/
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      sxar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ls
-RLFLAGS		=	
-#ranlib
-CC_TOOLS        =      cc 
-
-###########################################################
-#ARCH    Linux i486 i586 i686, gfortran compiler with gcc #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       GNU ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -fopenmp
-OMPCC           =       # -fopenmp
-SFC             =       gfortran
-SCC             =       gcc
-CCOMP           =       gcc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       #-fdefault-real-8
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -c 
-LDFLAGS_LOCAL   =
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O2 -ftree-vectorize -funroll-loops
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -O0
-FCDEBUG         =       # -g $(FCNOOPT)  # -fbacktrace -ggdb -fcheck=bounds,do,mem,pointer -ffpe-trap=invalid,zero,overflow
-FORMAT_FIXED    =       -ffixed-form
-FORMAT_FREE     =       -ffree-form -ffree-line-length-none
-FCSUFFIX        =       
-BYTESWAPIO      =       -fconvert=big-endian -frecord-marker=4
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux i486 i586 i686, g95 compiler with gcc #serial dmpar
-#
-DESCRIPTION     =       GNU ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # not supported
-OMP             =       # not supported
-OMPCC           =       # not supported
-SFC             =       g95
-SCC             =       gcc
-CCOMP           =       gcc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DF2CSTYLE -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -DF2CSTYLE
-LDFLAGS_LOCAL   =
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O2 #-fast
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -O0
-FCDEBUG         =       # -g $(FCNOOPT)
-FORMAT_FIXED    =       -ffixed-form
-FORMAT_FREE     =       -ffree-form -ffree-line-length-huge
-FCSUFFIX        =
-BYTESWAPIO      =       -fendian=big
-FCBASEOPTS_NO_G =       -Wno=101,139,155,158 $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     -fmod=$(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686, PGI compiler with gcc # serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       PGI ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -mp -Minfo=mp -Mrecursive
-OMPCC           =       # -mp
-SFC             =       pgf90
-SCC             =       gcc
-CCOMP           =       pgcc
-DM_FC           =       mpif90
-DM_CC           =       mpicc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3
-LDFLAGS_LOCAL   =       
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3 #-fastsse -Mvect=noaltcode -Msmartalloc -Mprefetch=distance:8 -Mfprelaxed # -Minfo=all =Mneginfo=all
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0
-FCDEBUG         =       # -g $(FCNOOPT)  # -C -Ktrap=fp -traceback
-FORMAT_FIXED    =       -Mfixed
-FORMAT_FREE     =       -Mfree
-FCSUFFIX        =
-BYTESWAPIO      =       -byteswapio
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO) $(OMP) # -Kieee -pc 64 -Ktrap=fp
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     -module $(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le, PGI compiler with pgcc, SGI MPT # serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       PGI ($SFC/$SCC): SGI MPT
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -mp -Minfo=mp -Mrecursive
-OMPCC           =       # -mp
-SFC             =       pgf90
-SCC             =       pgcc
-CCOMP           =       pgcc
-DM_FC           =       $(SFC) -I$(MPI_ROOT)/include
-DM_CC           =       $(SCC) -I$(MPI_ROOT)/include
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3
-LDFLAGS_LOCAL   =       -L$(MPI_ROOT)/lib -lmpi
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3 #-fastsse -Mvect=noaltcode -Msmartalloc -Mprefetch=distance:8 -Mfprelaxed # -Minfo=all =Mneginfo=all
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0
-FCDEBUG         =       # -g $(FCNOOPT) # -C -Ktrap=fp -traceback
-FORMAT_FIXED    =       -Mfixed
-FORMAT_FREE     =       -Mfree
-FCSUFFIX        =
-BYTESWAPIO      =       -byteswapio
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO) $(OMP) # -Kieee -pc 64 -Ktrap=fp
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     -module $(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le, PGI accelerator compiler with gcc # serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       PGI ($SFC/$SCC): PGI accelerator
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -mp -Minfo=mp -Mrecursive
-OMPCC           =       # -mp
-SFC             =       pgf90
-SCC             =       gcc
-CCOMP           =       pgcc
-DM_FC           =       mpif90
-DM_CC           =       mpicc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR -D_ACCEL  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3
-LDFLAGS_LOCAL   =
-CPLUSPLUSLIB    =
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -Kieee -acc -ta=nvidia,fastmath,cuda5.0,cc35 -Mcuda -fastsse -Mvect=noaltcode -Msmartalloc -Mprefetch=distance:8  # -Minfo=all =Mneginfo=all
-FCREDUCEDOPT    =       $(FCOPTIM)
-FCNOOPT         =       -O0
-FCDEBUG         =       # -g $(FCNOOPT) -Kieee -acc -ta=nvidia,cuda5.0,cc35 -Mcuda # -C -Ktrap=fp -traceback
-FORMAT_FIXED    =       -Mfixed
-FORMAT_FREE     =       -Mfree
-FCSUFFIX        =
-BYTESWAPIO      =       -byteswapio
-FCBASEOPTS      =       -w $(FCDEBUG) $(FORMAT_FREE) $(BYTESWAPIO) $(OMP) # -Kieee
-MODULE_SRCH_FLAG =     -module $(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686, ifort compiler with icc #serial smpar dmpar dm+sm
-#
-#        By default, some files are compiled without optimizations to speed up compilation. Removing
-#        respective makefile rules in the end of this file will result in longer compilation time, and, possibly
-#        Out Of Memory messages, but might produce binaries which are substantially faster.
-#
-#        Please visit http://www.intel.com/support/performancetools/sb/cs-028607.htm 
-#        for latest info on how to build WRF with Intel compilers.
-#
-#        If you got Out Of Memory message, there are several options:
-#          1. Check your memory limits (ulimit -a), possibly increasing swap partitions size.
-#          2. Remove any debugging flags (-g, -check, -traceback).
-#          3. Force the problematic file to be compiled with less optimizations (see examples at the 
-#             end of this file), try -no-ip compiler flag.
-#
-#        This configuration is aimed at accuracy. To improve performance (at the expence of accuracy) you might
-#        consider removing '-fp-model precise' flag from FCBASEOPTS. This enables non value-safe optimizations.
-#        Another option is to add '-ftz' flag, which flushes denormal results to zero when the application is in
-#        the gradual underflow mode. It may improve performance if the denormal values are not critical to the
-#        behavior of your workload. To further improve performance, add suitable vectorization options for your
-#        processor to FCOPTIM (see ifort manpage).
-#
-#        If you have Intel MPI installed and wish to use instead, make the
-#        following changes to settings below:
-#        DM_FC  = mpiifort
-#        DM_CC  = mpiicc
-#        and source bin64/mpivars.sh file from your Intel MPI installation
-#        before the build.
-#
-#        Suggestions for timing improvements from Craig Mattocks
-#
-#CFLAGS_LOCAL    =       -w -O3 -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars 
-#LDFLAGS_LOCAL   =       -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common 
-#FCBASEOPTS_NO_G =       -w -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common $(FORMAT_FREE) $(BYTESWAPIO)
-
-DESCRIPTION     =       INTEL ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ifort
-SCC             =       icc
-CCOMP           =       icc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_FUNC  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -ip #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars
-LDFLAGS_LOCAL   =       -ip #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-FCBASEOPTS_NO_G =       -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt -fno-common
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686, Xeon Phi (MIC architecture) ifort compiler with icc # dm+sm
-#
-
-DESCRIPTION     =       INTEL ($SFC/$SCC): Xeon Phi (MIC architecture)
-DMPARALLEL      =       1
-OMPCPP          =       -D_OPENMP
-OMP             =       -openmp -fpp -auto
-OMPCC           =       -openmp -fpp -auto
-SFC             =       ifort -mmic
-SCC             =       icc -mmic
-CCOMP           =       icc -mmic
-DM_FC           =       mpiifort -mmic
-DM_CC           =       mpiicc -mmic
-FC              =       $(DM_FC)
-CC              =       $(DM_CC)
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_FUNC -DCHUNK=16 -DXEON_OPTIMIZED_WSM5 -DXEON_SIMD -DOPTIMIZE_CFL_TEST -DFSEEKO64_OK -DINTEL_YSU_KLUDGE  -DWRF_USE_CLM
-OPTNOSIMD       =
-OPTKNC          =       -fimf-precision=low -fimf-domain-exclusion=15 -opt-assume-safe-padding -opt-streaming-stores always -opt-streaming-cache-evict=0 -mP2OPT_hlo_pref_use_outer_strategy=F
-CFLAGS_LOCAL    =       -w -O3 $(OPTKNC)
-LDFLAGS_LOCAL   =       $(OPTKNC)
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3 $(OPTKNC)
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-FCBASEOPTS_NO_G =       -w -openmp -auto -ftz -fno-alias -fp-model fast=1 -no-prec-div -no-prec-sqrt $(FORMAT_FREE) $(BYTESWAPIO) -auto -align array64byte #-vec-report6
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      gcc
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686, Xeon (SNB with AVX mods) ifort compiler with icc # serial smpar dmpar dm+sm
-#
-
-DESCRIPTION     =       INTEL ($SFC/$SCC): Xeon (SNB with AVX mods)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ifort 
-SCC             =       icc 
-CCOMP           =       icc 
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       $(DM_FC)
-CC              =       $(DM_CC)
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_FUNC -DCHUNK=64 -DXEON_OPTIMIZED_WSM5 -DOPTIMIZE_CFL_TEST  -DWRF_USE_CLM
-OPTNOSIMD       =
-OPTAVX          =       -xAVX
-CFLAGS_LOCAL    =       -w -O3 $(OPTAVX)
-LDFLAGS_LOCAL   =       $(OPTAVX)
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3 $(OPTAVX)
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-FCBASEOPTS_NO_G =       -w $(OMP) -auto -ftz -fno-alias -fp-model fast=1 -no-prec-div -no-prec-sqrt $(FORMAT_FREE) $(BYTESWAPIO) -auto -align array64byte #-vec-report6
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      gcc
+#!/bin/sh
 
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686, ifort compiler with icc, SGI MPT #serial smpar dmpar dm+sm
-#
-#        By default, some files are compiled without optimizations to speed up compilation. Removing
-#        respective makefile rules in the end of this file will result in longer compilation time, and, possibly
-#        Out Of Memory messages, but might produce binaries which are substantially faster.
-#
-#        Please visit http://www.intel.com/support/performancetools/sb/cs-028607.htm 
-#        for latest info on how to build WRF with Intel compilers.
-#
-#        If you got Out Of Memory message, there are several options:
-#          1. Check your memory limits (ulimit -a), possibly increasing swap partitions size.
-#          2. Remove any debugging flags (-g, -check, -traceback).
-#          3. Force the problematic file to be compiled with less optimizations (see examples at the 
-#             end of this file), try -no-ip compiler flag.
-#
-#        This configuration is aimed at accuracy. To improve performance (at the expence of accuracy) you might
-#        consider removing '-fp-model precise' flag from FCBASEOPTS. This enables non value-safe optimizations.
-#        Another option is to add '-ftz' flag, which flushes denormal results to zero when the application is in
-#        the gradual underflow mode. It may improve performance if the denormal values are not critical to the
-#        behavior of your workload. To further improve performance, add suitable vectorization options for your
-#        processor to FCOPTIM (see ifort manpage).
-#
-#        If you have Intel MPI installed and wish to use instead, make the
-#        following changes to settings below:
-#        DM_FC  = mpiifort
-#        DM_CC  = mpiicc
-#        and source bin64/mpivars.sh file from your Intel MPI installation
-#        before the build.
-
-DESCRIPTION     =       INTEL ($SFC/$SCC): SGI MPT
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ifort
-SCC             =       icc
-CCOMP           =       icc
-DM_FC           =       $(SFC)
-DM_CC           =       $(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_FUNC  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -ip #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars
-LDFLAGS_LOCAL   =       -ip -lmpi #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-FCBASEOPTS_NO_G =       -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt -fno-common
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686, ifort compiler with icc, IBM POE #serial smpar dmpar dm+sm
-
-# This is identical to the Intel Fortran with Intel MPI but configured
-# to use IBM POE as the MPI implementation.  NCEP needs this
-# configuration to run on the new WCOSS Tide and Gyre operational
-# forecasting machines.
-
-DESCRIPTION     =       INTEL ($SFC/$SCC): IBM POE
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ifort
-SCC             =       icc
-CCOMP           =       icc
-DM_FC           =       mpfort
-DM_CC           =       mpcc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_FUNC  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -ip #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars
-LDFLAGS_LOCAL   =       -ip #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-FCBASEOPTS_NO_G =       -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt -fno-common
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    ia64 Linux ifort compiler with icc 9.x,10.x #serial smpar dmpar dm+sm
-#
-#        By default, some files are compiled without optimizations to
-#        speed up compilation. Removing respective makefile rules in the
-#        end of this file will result in longer compilation time, and,
-#        possibly Out Of Memory messages, but might produce binaries
-#        which are substantially faster.
-#
-#        Please visit http://www.intel.com/support/performancetools/sb/cs-028607.htm 
-#        for latest info on how to build WRF with Intel compilers.
-#
-#        If you get Out Of Memory messages, there are several options:
-#          1. Check your memory limits (ulimit -a), possibly increasing
-#             swap partitions size.
-#          2. Remove any debugging flags (-g, -check, -traceback).
-#          3. Force the problematic file to be compiled with lower
-#             optimization (see examples at the end of this file),
-#             try the -no-ip compiler flag.
-#
-#        The default configuration is aimed at accuracy. To improve speed
-#        with only negligible effect on floating point accuracy,
-#        consider removing "-fp-model precise" from FCBASEOPTS. If
-#        you are using ifort 9.1.x compiler or earlier, consider
-#        uncommenting the version of the FCBASEOPTS settings that uses
-#        the -IPF-fp-relaxed option.
-#
-#        If you can tolerate a longer build, change the setting of
-#        FCNOOPT to -O1, for slightly faster performance.
-#
-#        If you have Intel MPI installed and wish to use instead, make the
-#        following changes to settings below:
-#        DM_FC  = mpiifort
-#        DM_CC  = mpiicc
-#        and source bin/mpivars.sh file from your Intel MPI installation
-#        before the build.
-#
-
-DESCRIPTION     =       INTEL ($SFC/$SCC): ia64
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ifort
-SCC             =       icc
-CCOMP           =       icc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_FUNC  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -ip #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars
-LDFLAGS_LOCAL   =       -ip #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-FCBASEOPTS_NO_G =       -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt -fno-common
-#FCBASEOPTS_NO_G =       -w -ftz -align all -fno-alias -IPF-fp-relaxed $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-LIB_LOCAL       =       -L/usr/lib -lmpi 
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux SGI Altix, ifort compiler with icc 9.x,10.x #serial smpar dmpar dm+sm
-#
-#        By default, some files are compiled without optimizations to
-#        speed up compilation. Removing respective makefile rules in the
-#        end of this file will result in longer compilation time, and,
-#        possibly Out Of Memory messages, but might produce binaries
-#        which are substantially faster.
-#
-#        If you get Out Of Memory messages, there are several options:
-#          1. Check your memory limits (ulimit -a), possibly increasing
-#             swap partitions size.
-#          2. Remove any debugging flags (-g, -check, -traceback).
-#          3. Force the problematic file to be compiled with lower
-#             optimization (see examples at the end of this file),
-#             try the -no-ip compiler flag.
-#
-#        Please visit http://www.intel.com/support/performancetools/sb/cs-028607.htm 
-#        for latest info on how to build WRF with Intel compilers.
-#
-#        The default configuration is aimed at accuracy. To improve speed
-#        with only negligible effect on floating point accuracy,
-#        consider removing "-fp-model precise" from FCBASEOPTS.  If
-#        you are using an ifort 9.1.x compiler or earlier, consider
-#        uncommenting the version of the FCBASEOPTS settings that uses
-#        the -IPF-fp-relaxed option.  To further improve performance,
-#        add processor-specific options to FCOPTIM (see ifort manpage).
-#
-#        If you can tolerate a longer build, change the setting of
-#        FCNOOPT to -O1, for slightly faster performance.
-#
-#        If your SGI MPI library is not installed in the default
-#        locations (/usr/bin, /usr/include, /usr/lib), set MPI_HOME
-#        to be the path to the directory where the SGI MPI bin,
-#        include and lib directories are, and change the DM_FC,
-#        DM_CC and LIB_LOCAL settings as follows:
-#        DM_FC = $(SFC) -I$(MPI_HOME)/include
-#        DM_CC = $(SFC) -I$(MPI_HOME)/include
-#        LIB_LOCAL = -L$(MPI_HOME)/lib -lmpi 
-
-DESCRIPTION     =       INTEL ($SFC/$SCC): SGI Altix
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ifort
-SCC             =       icc
-CCOMP           =       icc
-DM_FC           =       $(SFC)
-DM_CC           =       $(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_FUNC  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -ip #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars
-LDFLAGS_LOCAL   =       -ip #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-FCBASEOPTS_NO_G =       -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt -fno-common
-#FCBASEOPTS_NO_G =       -w -ftz -align all -fno-alias -IPF-fp-relaxed $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-LIB_LOCAL       =       -L/usr/lib -lmpi 
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux i486 i586 i686 x86_64 ppc64le, PathScale compiler with pathcc #serial dmpar
-#
-DESCRIPTION     =       PATHSCALE ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # not supported
-OMP             =       # not supported
-OMPCC           =       # not supported
-SFC             =       pathf90
-SCC             =       pathcc
-CCOMP           =       pathcc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM -D__PATHSCALE__
-CFLAGS_LOCAL    =       
-LDFLAGS_LOCAL   =
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O -OPT:Ofast:Olimit=5000
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -O0
-FCDEBUG         =       # -g $(FCNOOPT)  # -C -trapuv 
-FORMAT_FIXED    =       -fixedform
-FORMAT_FREE     =       -freeform
-FCSUFFIX        =
-BYTESWAPIO      =       -byteswapio
-FCBASEOPTS_NO_G =       -w -fno-second-underscore $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     -module $(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le, gfortran compiler with gcc  #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       GNU ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -fopenmp
-OMPCC           =       # -fopenmp
-SFC             =       gfortran
-SCC             =       gcc
-CCOMP           =       gcc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       #-fdefault-real-8
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -c 
-LDFLAGS_LOCAL   =       
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O2 -ftree-vectorize -funroll-loops
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0
-FCDEBUG         =       # -g $(FCNOOPT) # -ggdb -fbacktrace -fcheck=bounds,do,mem,pointer -ffpe-trap=invalid,zero,overflow
-FORMAT_FIXED    =       -ffixed-form
-FORMAT_FREE     =       -ffree-form -ffree-line-length-none
-FCSUFFIX        =       
-BYTESWAPIO      =       -fconvert=big-endian -frecord-marker=4
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -G
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
+# parse argument list
 
-###########################################################
-#ARCH    Darwin (MACOS) PGI compiler with pgcc #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       PGI ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -mp -Minfo=mp -Mrecursive
-OMPCC           =       # -mp
-SFC             =       pgf90
-SCC             =       pgcc
-CCOMP           =       pgcc
-DM_FC           =       mpif90
-DM_CC           =       mpicc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DMACOS -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -DMACOS
-LDFLAGS_LOCAL   =       
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O2 -fast
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0
-FCDEBUG         =       # -g $(FCNOOPT) # -C -Ktrap=fp -traceback
-FORMAT_FIXED    =       -Mfixed
-FORMAT_FREE     =       -Mfree
-FCSUFFIX        =       
-BYTESWAPIO      =       -byteswapio
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO) $(OMP) # -Kieee -pc 64 -Ktrap=fp
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG) -Mnomod
-MODULE_SRCH_FLAG =     -module $(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      cpp CONFIGURE_CPPFLAGS -xassembler-with-cpp
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	-c
-CC_TOOLS        =      cc
-
-###########################################################
-#ARCH    Darwin (MACOS) intel compiler with icc #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       INTEL ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ifort
-SCC             =       icc
-CCOMP           =       icc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DMACOS -DNONSTANDARD_SYSTEM_FUNC  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -ip -DMACOS #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars -DMACOS
-# increase stack size; also note that for OpenMP, set environment OMP_STACKSIZE 4G or greater
-LDFLAGS_LOCAL   =       -ip -Wl,-stack_addr,0xF10000000 -Wl,-stack_size,0x64000000 #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-# added -fno-common at suggestion of R. Dubtsov as workaround for failing to link program_name
-FCBASEOPTS_NO_G =       -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt -fno-common
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      cpp CONFIGURE_CPPFLAGS -xassembler-with-cpp
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	-c
-CC_TOOLS        =      cc
-
-###########################################################
-#ARCH    Darwin (MACOS) intel compiler with clang EDIT FOR OPENMPI #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       INTEL ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp
-SFC             =       ifort
-SCC             =       clang
-CCOMP           =       clang
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC) # the -cc=cc option causes openmpi mpicc to fail (unrecognized option)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DMACOS -DNONSTANDARD_SYSTEM_FUNC  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -DMACOS #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars -DMACOS
-# increase stack size; also note that for OpenMP, set environment OMP_STACKSIZE 4G or greater
-LDFLAGS_LOCAL   =       -Wl,-stack_addr,0xF10000000 -Wl,-stack_size,0x64000000 #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-FCBASEOPTS_NO_G =       -fp-model precise -w -ftz -align all -fno-alias -fno-common $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      cpp CONFIGURE_CPPFLAGS -xassembler-with-cpp
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	-c
-CC_TOOLS        =      cc
-
-###########################################################
-#ARCH    Darwin (MACOS) g95 with gcc #serial dmpar
-#
-DESCRIPTION     =       GNU ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # not supported
-OMP             =       # not supported
-OMPCC           =       # not supported
-SFC             =       g95
-SCC             =       gcc
-CCOMP           =       gcc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DG95 -DMACOS -DF2CSTYLE -DNONSTANDARD_SYSTEM_SUBR -DRCONFIG_CHARLEN=64  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -DMACOS -DF2CSTYLE
-LDFLAGS_LOCAL   =
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O2 # -fast
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0
-FCDEBUG         =       # -g $(FCNOOPT)
-FORMAT_FIXED    =       -ffixed-form
-FORMAT_FREE     =       -ffree-form -ffree-line-length-huge
-FCSUFFIX        =
-BYTESWAPIO      =       -fendian=big
-FCBASEOPTS_NO_G =       -Wno=101,139,155,158 $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-LIB_LOCAL       =    -L/usr/lib -lSystemStubs
-MODULE_SRCH_FLAG =     -fmod=$(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      cpp CONFIGURE_CPPFLAGS -xassembler-with-cpp
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib -c
-RLFLAGS		=	-c
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Darwin (MACOS) gfortran with gcc #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       GNU ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -fopenmp
-OMPCC           =       # -fopenmp
-SFC             =       gfortran
-SCC             =       gcc
-CCOMP           =       gcc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       #-fdefault-real-8
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR -DMACOS  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -c  -DMACOS
-LDFLAGS_LOCAL   =
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O2 -ftree-vectorize -funroll-loops
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -O0
-FCDEBUG         =       # -g $(FCNOOPT) # -fbacktrace -ggdb -fcheck=bounds,do,mem,pointer -ffpe-trap=invalid,zero,overflow
-FORMAT_FIXED    =       -ffixed-form
-FORMAT_FREE     =       -ffree-form -ffree-line-length-none
-FCSUFFIX        =       
-BYTESWAPIO      =       -fconvert=big-endian -frecord-marker=4
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      cpp CONFIGURE_CPPFLAGS -xassembler-with-cpp
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	-c
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Darwin (MACOS) gfortran with clang #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       GNU ($SFC/clang)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -fopenmp
-OMPCC           =       # -fopenmp
-SFC             =       gfortran
-SCC             =       clang
-CCOMP           =       clang
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=clang
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       #-fdefault-real-8
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR -DMACOS -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -c  -DMACOS
-LDFLAGS_LOCAL   =
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O2 -ftree-vectorize -funroll-loops
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -O0
-FCDEBUG         =       # -g $(FCNOOPT) # -fbacktrace -ggdb -fcheck=bounds,do,mem,pointer -ffpe-trap=invalid,zero,overflow
-FORMAT_FIXED    =       -ffixed-form
-FORMAT_FREE     =       -ffree-form -ffree-line-length-none
-FCSUFFIX        =       
-BYTESWAPIO      =       -fconvert=big-endian -frecord-marker=4
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      cpp CONFIGURE_CPPFLAGS -xassembler-with-cpp
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	-c
-CC_TOOLS        =      clang
-
-###########################################################
-#ARCH    Darwin (MACOS) xlf  #serial dmpar
-#
-DESCRIPTION     =       IBM ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # not supported
-OMP             =       # not supported
-OMPCC           =       # not supported
-SFC             =       xlf90_r
-SCC             =       cc
-CCOMP           =       cc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =        -qrealsize=$(RWORDSIZE) -qintsize=4
-ARCH_LOCAL      =       -DMAC_KLUDGE -DF2CSTYLE -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -DMACOS -DF2CSTYLE
-LDFLAGS_LOCAL   =
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3 -qarch=auto
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -qnoopt
-FCDEBUG         =       # -g $(FCNOOPT) -qfullpath
-FORMAT_FIXED    =       -qfixed
-FORMAT_FREE     =       -qfree=f90
-FCSUFFIX        =       -qsuffix=f=f90
-BYTESWAPIO      =       
-FCBASEOPTS_NO_G =       -qsave -qmaxmem=32767 -qspillsize=32767 -w
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     -fmod=$(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      cpp CONFIGURE_CPPFLAGS 
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	-c
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    AIX xlf compiler with xlc #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       IBM ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -qsmp=noauto
-OMPCC           =       # -qsmp=noauto
-SFC             =       xlf90_r
-SCC             =       cc_r
-SC99            =       c99_r
-CCOMP           =       cc_r
-DM_FC           =       mpxlf90_r
-DM_CC           =       mpcc_r # -DMPI2_SUPPORT
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =        -qrealsize=$(RWORDSIZE) -qintsize=4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR -DNATIVE_MASSV  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -DNOUNDERSCORE
-LDFLAGS_LOCAL   =       -lmass -lmassv -bnoquiet # print diagnostic messages
-CPLUSPLUSLIB    =       -lC
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-# -qhot commented out in 3.0.1.1 release because of reported problems with 
-# model results under certain configurations. Use at your own risk.
-# -qstrict added in 3.6.1 release because of reported problems with 
-# model stability under certain configurations. Use at your own risk.
-FCOPTIM         =       -O3 -qalias_size=209715200 -qstrict # -qhot
-FCREDUCEDOPT    =       -O2 # implies -qstrict
-FCNOOPT         =       -qnoopt
-FCDEBUG         =       # -g $(FCNOOPT) -qfullpath
-FORMAT_FIXED    =       -qfixed
-FORMAT_FREE     =       -qfree=f90
-FCSUFFIX        =       -qsuffix=f=f90
-BYTESWAPIO      =       
-FCBASEOPTS_NO_G =       -w -qspill=81920 -qmaxmem=-1 $(FORMAT_FREE) $(BYTESWAPIO)  #-qflttrap=zerodivide:invalid:enable -qsigtrap -C # -qinitauto=7FF7FFFF
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =       #CONFIGURE_TRADFLAG  # causing troubles with xl cpp on AIX, -traditional removed fom default settings
-CPP             =       /lib/cpp CONFIGURE_CPPFLAGS
-AR              =       ar
-ARFLAGS         =       ru
-M4              =       m4 -B 20000
-RANLIB          =       ranlib
-RLFLAGS		=	
-CC_TOOLS        =       cc
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686, xlf compiler with xlc # serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       IBM ($SFC/$SCC)
-DMPARALLEL      =        #1
-OMPCPP          =        # -D_OPENMP
-OMP             =        # -qsmp=noauto
-OMPCC           =        # -qsmp=noauto
-SFC             =       xlf90_r
-SCC             =       cc_r
-SC99            =        c99_r
-CCOMP           =       cc_r
-DM_FC           =        mpfort -compiler xlf90_r
-DM_CC           =       mpcc # -DMPI2_SUPPORT
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =        $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -qrealsize=$(RWORDSIZE) -qintsize=4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR -DNATIVE_MASSV  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -DNOUNDERSCORE
-LDFLAGS_LOCAL   =       -lmass_64 -lmassvp7_64 -q64 -bnoquiet # linking diagnostics
-CPLUSPLUSLIB    =       -lC
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-# -qhot commented out in 3.0.1.1 release because of reported problems with 
-# model results under certain configurations. Use at your own risk.
-# -qstrict added in 3.6.1 release because of reported problems with 
-# model stability under certain configurations. Use at your own risk.
-FCOPTIM         =       -q64 -O3 -qstrict # -qhot
-# if linking problems with libxlsmp occur, try -qsmp=noauto 
-FCREDUCEDOPT    =       -q64 -O2
-FCNOOPT         =       -q64 -qnoopt -qstrict # -qsmp=noauto
-FCDEBUG         =       # -g $(FCNOOPT) -qfullpath
-FORMAT_FIXED    =       -qfixed
-FORMAT_FREE     =       -qfree=f90
-FCSUFFIX        =       -qsuffix=f=f90
-BYTESWAPIO      =       
-FCBASEOPTS_NO_G =       -w -qspill=81920 -qmaxmem=-1 $(FORMAT_FREE) $(BYTESWAPIO)  #-qflttrap=zerodivide:invalid:enable -qsigtrap -C # -qinitauto=7FF7FFFF
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =       
-# instead of the GNU CPP, the CPP shipped with XLF should be used, 
-# which does not work with the -traditional flag
-CPP             =       $(XLF_BASE)/exe/cpp CONFIGURE_CPPFLAGS
-AR              =       ar
-ARFLAGS         =       ru
-M4              =       m4 -B 14000
-RANLIB          =       ranlib
-RLFLAGS		=	
-CC_TOOLS        =       cc
-
-###########################################################
-#ARCH    Cray XC CLE/Linux x86_64, PGI compiler with gcc # serial dmpar smpar dm+sm
-#
-# Recommended CLE/Linux memory allocation settings at run time:
-# export MALLOC_MMAP_MAX_=0
-# export MALLOC_TRIM_THRESHOLD_=536870912
-#
-DESCRIPTION     =       PGI ($SFC/$SCC): Cray XC CLE
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -mp -Mrecursive
-OMPCC           =       # -mp
-SFC             =       ftn
-SCC             =       gcc
-CCOMP           =       pgcc
-DM_FC           =       ftn
-DM_CC           =       gcc -I$(MPICH_DIR)/include
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR
-CFLAGS_LOCAL    =       -w -O3
-LDFLAGS_LOCAL   =
-# module load libfast to use Cray XT fast math library
-#LIB_LOCAL       =       -lfast_mv
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-# PGI recommended
-FCOPTIM         =       -O3 #-fastsse -Mvect=noaltcode -Msmartalloc -Mprefetch=distance:8 -Mfprelaxed # -Minfo=all =Mneginfo=all
-# For Pathscale compiler
-#FCOPTIM        =       -O3 -OPT:Ofast
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -O0
-OPTERON_TYPE    =
-# Use this for AMD Opteron quad-core
-#OPTERON_TYPE    =      -tp barcelona-64
-#OPTERON_TYPE    =      -tp shanghai-64
-# Use this for AMD Opteron six-way Istanbul
-#OPTERON_TYPE    =      -tp istanbul
-FCDEBUG         =       # -g $(FCNOOPT)  # -C -Ktrap=fp -traceback
-FORMAT_FIXED    =       -Mfixed
-FORMAT_FREE     =       -Mfree
-# For Pathscale compiler
-#OPTERON_TYPE    =       -march=barcelona -msse4a
-#FORMAT_FIXED    =       -fixedform
-#FORMAT_FREE     =       -freeform
-FCSUFFIX        =
-BYTESWAPIO      =       -byteswapio
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO) $(OPTERON_TYPE) $(OMP)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =    
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS $(TRADFLAG)
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Cray XE and XC CLE/Linux x86_64, Cray CCE compiler # serial dmpar smpar dm+sm
-# Use this for both XE6 systems with AMD Opteron and XC with Intel x86_64
-
-DESCRIPTION     =       CRAY CCE ($SFC/$SCC): Cray XE and XC
-# OpenMP is enabled by default for Cray CCE compiler
-# This turns it off
-NOOMP           =       -hnoomp
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -homp
-OMPCC           =       # -homp
-SFC             =       ftn $(NOOMP)
-SCC             =       cc 
-CCOMP           =       gcc 
-DM_FC           =       ftn $(NOOMP)
-DM_CC           =       cc
-FC              =       $(DM_FC)
-CC              =       $(DM_CC)
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -s integer32 -s real`expr 8 \* $(RWORDSIZE)`
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -O3 
-LDFLAGS_LOCAL   =       
-# uncomment this for wrfda build
-#LIB_LOCAL       =       -L$(WRF_SRC_ROOT_DIR)/external/fftpack/fftpack5 -lfftpack \
-#                        -L$(WRF_SRC_ROOT_DIR)/external/RSL_LITE -lrsl_lite
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       # -Ofp3 
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O1 -Ofp1 -Oipa0 -Onomodinline
-FCDEBUG         =       # -g -O0 # -K trap=fp -R bc
-FORMAT_FIXED    =       -f fixed
-FORMAT_FREE     =       -f free
-FCSUFFIX        =
-BYTESWAPIO      =       -h byteswapio
-FCBASEOPTS_NO_G =       -N1023 $(FORMAT_FREE) $(BYTESWAPIO) #-ra
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      gcc
-
-###########################################################
-#ARCH    Cray XC CLE/Linux x86_64, Xeon ifort compiler # serial dmpar smpar dm+sm
-#
-
-DESCRIPTION     =       INTEL ($SFC/$SCC): Cray XC
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ftn
-SCC             =       icc 
-CCOMP           =       icc 
-DM_FC           =       ftn
-DM_CC           =       cc
-FC              =       $(DM_FC)
-CC              =       $(DM_CC)
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_FUNC  -DWRF_USE_CLM
-OPTNOSIMD       =
-# set this to override Cray 'craype' module setting
-#OPTAVX          =       -xAVX
-CFLAGS_LOCAL    =       -w -O3 -ip $(OPTAVX)
-LDFLAGS_LOCAL   =       $(OPTAVX)
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -ip -O3 $(OPTAVX)
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0 -fno-inline -fno-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-#add -fp-model precise in FCBASEOPTS_NO_G to improve the accuracy of WRFPLUS check_AD test, suggested by Thomas Schwitalla.
-FCBASEOPTS_NO_G =       -w -ftz -fno-alias -align all $(FORMAT_FREE) $(BYTESWAPIO) #-fp-model precise #-vec-report6
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      gcc
-
-
-###########################################################
-#ARCH    Linux ppc64 BG /L blxlf compiler with blxlc # dmpar
-#
-DESCRIPTION     =       IBM ($SFC/$SCC): ppc64 Blue Gene\L
-DMPARALLEL      =       # 1
-OMPCPP          =       # not supported
-OMP             =       # not supported
-OMPCC           =       # not supported
-BGL_SYS         =       /bgl/BlueLight/ppcfloor/bglsys
-MPI_INC         =       -I$(BGL_SYS)/include
-MPI_LIB         =       -L$(BGL_SYS)/lib -lmpich.rts -lmsglayer.rts -lrts.rts -ldevices.rts
-SFC             =       blrts_xlf90
-SCC             =       blrts_xlc
-CCOMP           =       blrts_xlc
-DM_FC           =       $(SFC)
-DM_CC           =       $(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =        -qrealsize=$(RWORDSIZE) -qintsize=4
-# If system has even more processors, set VERY_LARGE_MAXPROC to that number
-ARCH_LOCAL      =       -DMOVE_NL_OUTSIDE_MODULE_CONFIGURE -DNONSTANDARD_SYSTEM_SUBR  -DVERY_LARGE_MAXPROC=36768 -DBLUEGENE  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -DNOUNDERSCORE -DNCARIBM_NOC99 $(MPI_INC)  
-LIB_LOCAL       =       $(MPI_LIB)
-LDFLAGS_LOCAL   =       -Wl,--allow-multiple-definition -qstatic
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O2 -qarch=440
-FCNOOPT		=       -qnoopt
-FCDEBUG         =       # $(FCNOOPT) -qfullpath
-FORMAT_FIXED    =       -qfixed
-FORMAT_FREE     =       -qfree=f90
-FCSUFFIX        =       -qsuffix=f=f90
-BYTESWAPIO      =       
-FCBASEOPTS_NO_G =       -w -qspill=20000 -qmaxmem=64000 $(FORMAT_FREE) $(BYTESWAPIO) $(MPI_INC) #-qflttrap=zerodivide:invalid:enable -qsigtrap
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =       CONFIGURE_TRADFLAG
-# this might be different on different systems but we want the xlf version of cpp, not Linux's
-# NYBlue
-CPP             =       /opt/ibmcmp/xlf/bg/10.1/exe/cpp CONFIGURE_CPPFLAGS
-# frost.ucar.edu
-CPP             =       /opt/ibmcmp/xlf/9.1/exe/cpp CONFIGURE_CPPFLAGS
-AR              =       ar
-ARFLAGS         =       ru
-M4              =       m4 -B 14000
-RANLIB          =       ranlib
-RLFLAGS		=	
-CC_TOOLS        =       cc
-###########################################################
-#ARCH    Linux ppc64 BG /P xlf compiler with xlc # smpar dmpar dm+sm
-#     developed on surveyor.alcf.anl.gov (thanks to ANL/ALCF)
-#
-DESCRIPTION     =       IBM ($SFC/$SCC): ppc64 Blue Gene\P
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -qsmp=noauto
-OMPCC           =       # -qsmp=noauto
-# these have to be the same as DM_FC on surveyor or it fails with weird errors in time manager
-SFC             =       mpixlf90_r
-SCC             =       mpixlc_r
-CCOMP           =       mpixlc_r
-DM_FC           =       mpixlf90_r
-DM_CC           =       mpixlc_r # -DMPI2_SUPPORT
-FC              =        $(DM_FC)
-CC              =       $(DM_CC) -DFSEEKO64_OK
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =        -qrealsize=$(RWORDSIZE) -qintsize=4
-# If system has even more processors, set VERY_LARGE_MAXPROC to that number
-ARCH_LOCAL      =       -DMOVE_NL_OUTSIDE_MODULE_CONFIGURE -DNONSTANDARD_SYSTEM_SUBR  -DVERY_LARGE_MAXPROC=36768 -DBLUEGENE  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -DNOUNDERSCORE 
-LIB_LOCAL       =
-LDFLAGS_LOCAL   =       -Wl,--allow-multiple-definition,--relax -qstatic
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3 -qnoipa -qarch=auto -qcache=auto -qtune=auto
-FCNOOPT		=       -qnoopt
-FCDEBUG         =       # $(FCNOOPT) -g -qfullpath
-FORMAT_FIXED    =       -qfixed
-FORMAT_FREE     =       -qfree=f90
-FCSUFFIX        =       -qsuffix=f=f90
-BYTESWAPIO      =       
-FCBASEOPTS_NO_G =       -w -qspill=20000 -qmaxmem=64000 $(FORMAT_FREE) $(BYTESWAPIO) #-qflttrap=zerodivide:invalid:enable -qsigtrap
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =       CONFIGURE_TRADFLAG
-# this might be different on different systems but we want the xlf version of cpp, not Linux's
-# surveyor.alcf.anl.gov
-CPP             =       /opt/ibmcmp/xlf/bg/11.1/exe/cpp CONFIGURE_CPPFLAGS
-AR              =       ar
-ARFLAGS         =       ru
-M4              =       m4 -B 14000
-RANLIB          =       ranlib
-RLFLAGS		=	
-CC_TOOLS        =       cc
-###########################################################
-#ARCH    Linux ppc64 IBM Blade Server xlf compiler with xlc # dmpar
-#    provided by Luis C. Cana Cascallar for IBM JS21 blade server, May 2009
-#
-DESCRIPTION     =       IBM ($SFC/$SCC): ppc64 IBM Blade
-DMPARALLEL      =       # 1
-OMPCPP          =       # not supported
-OMP             =       # not supported
-OMPCC           =       # not supported
-SFC             =       xlf90_r -q64
-SCC             =       xlc_r -q64
-CCOMP           =       xlc_r -q64
-DM_FC           =       mpif90 -q64
-DM_CC           =       mpicc -q64 -DFSEEKO64_OK # -DMPI2_SUPPORT
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =        -qrealsize=$(RWORDSIZE) -qintsize=4
-# If system has even more processors, set VERY_LARGE_MAXPROC to that number
-ARCH_LOCAL      =       -DMOVE_NL_OUTSIDE_MODULE_CONFIGURE -DNONSTANDARD_SYSTEM_SUBR  -DVERY_LARGE_MAXPROC=36768  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -DNOUNDERSCORE 
-LDFLAGS_LOCAL   =       
-CPLUSPLUSLIB    =       -lC
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM		=       -O3 -qtune=ppc970 -qarch=ppc970 
-FCNOOPT		=       -qnoopt
-FCDEBUG         =       # -g $(FCNOOPT) -qfullpath
-FORMAT_FIXED    =       -qfixed
-FORMAT_FREE     =       -qfree=f90
-FCSUFFIX        =       -qsuffix=f=f90
-BYTESWAPIO      =       
-FCBASEOPTS_NO_G =       -w -qspill=20000 -qmaxmem=32767 $(FORMAT_FREE) $(BYTESWAPIO) #-qflttrap=zerodivide:invalid:enable -qsigtrap
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =       CONFIGURE_TRADFLAG
-# this might be different on different systems but we want the xlf version of cpp, not Linux
-CPP             =       /opt/ibmcmp/xlf/11.1/exe/cpp CONFIGURE_CPPFLAGS
-AR              =       ar
-ARFLAGS         =       ru
-M4              =       m4 -B 14000
-RANLIB          =       ranlib
-RLFLAGS		=	
-CC_TOOLS        =       xlc -q64
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686, PGI compiler with pgcc # serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       PGI ($SFC/$SCC)
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -mp -Minfo=mp -Mrecursive
-OMPCC           =       # -mp
-SFC             =       pgf90
-SCC             =       pgcc
-CCOMP           =       pgcc
-DM_FC           =       mpif90
-DM_CC           =       mpicc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3
-LDFLAGS_LOCAL   =       
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3 #-fastsse -Mvect=noaltcode -Msmartalloc -Mprefetch=distance:8 -Mfprelaxed # -Minfo=all =Mneginfo=all
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0
-FCDEBUG         =       # -g $(FCNOOPT)  # -C -Ktrap=fp -traceback
-FORMAT_FIXED    =       -Mfixed
-FORMAT_FREE     =       -Mfree
-FCSUFFIX        =
-BYTESWAPIO      =       -byteswapio
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO) $(OMP)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     -module $(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    CYGWIN_NT i686, PGI compiler on Windows # serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       PGI ($SFC/$SCC): Windows
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -mp -Minfo=mp
-OMPCC           =       # -mp
-SFC             =       pgf90
-SCC             =       pgcc
-CCOMP           =       pgcc
-DM_FC           =       pgf90
-DM_CC           =       pgcc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR -D_WIN32  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -DMEMCPY_FOR_BCOPY 
-LDFLAGS_LOCAL   =       Ws2_32.lib # -lnetcdff
-CPLUSPLUSLIB    =
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -fastsse -Mvect=noaltcode -Mprefetch=distance:8 -Mfprelaxed -tp core2-64 # -Minfo=all 
-FCREDUCEDOPT    =       $(FCOPTIM)
-FCNOOPT         =       -O0
-FCDEBUG         =       # -g $(FCNOOPT) # -C -Ktrap=fp
-FORMAT_FIXED    =       -Mfixed
-FORMAT_FREE     =       -Mfree
-FCSUFFIX        =
-BYTESWAPIO      =       -byteswapio 
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG=       -module $(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =
-CPP             =       pgprepro
-AR              =       ar
-ARFLAGS         =       cr
-M4              =       NA
-RANLIB          =       ranlib
-RLFLAGS		=	
-CC_TOOLS        =       $(SCC) 
-
-LIB_EXTERNAL    = \
-                     ../external/io_netcdf/libwrfio_nf.a CONFIGURE_NETCDF_PATH/lib/libnetcdf.lib \
-                     ../external/wavelet/libWavelet.a ../external/wavelet/lib_wavelet.a
-ESMF_IO_LIB     =    ../external/esmf_time_f90/libesmf_time.a
-LIB_BUNDLED     = \
-                     ../external/fftpack/fftpack5/libfftpack.a \
-                     ../external/io_grib1/libio_grib1.a \
-                     ../external/io_grib_share/libio_grib_share.a \
-                     ../external/io_int/libwrfio_int.a \
-                     $(ESMF_IO_LIB) \
-                     CONFIGURE_COMMS_LIB \
-                     ../frame/module_internal_header_util.o \
-                     ../frame/pack_utils.o
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686, PGI compiler with gcc -f90= # serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       PGI ($SFC/$SCC): -f90=pgf90
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -mp -Minfo=mp -Mrecursive
-OMPCC           =       # -mp
-SFC             =       pgf90
-SCC             =       gcc
-CCOMP           =       gcc
-DM_FC           =       mpif90 -f90=pgf90
-DM_CC           =       mpicc -cc=gcc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3
-LDFLAGS_LOCAL   =       
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3 #-fastsse -Mvect=noaltcode -Msmartalloc -Mprefetch=distance:8 -Mfprelaxed # -Minfo=all =Mneginfo=all
-FCREDUCEDOPT    =       $(FCOPTIM)
-FCNOOPT         =       -O0
-FCDEBUG         =       # -g $(FCNOOPT)  # -C -Ktrap=fp -traceback
-FORMAT_FIXED    =       -Mfixed
-FORMAT_FREE     =       -Mfree
-FCSUFFIX        =
-BYTESWAPIO      =       -byteswapio
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO) $(OMP)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     -module $(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Darwin (MACOS) PGI compiler with pgcc -f90= #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       PGI ($SFC/$SCC): -f90=pgf90
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -mp -Minfo=mp -Mrecursive
-OMPCC           =       # -mp
-SFC             =       pgf90
-SCC             =       pgcc
-CCOMP           =       pgcc
-DM_FC           =       mpif90 -f90=pgf90
-DM_CC           =       mpicc -cc=pgcc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DMACOS -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -DMACOS
-LDFLAGS_LOCAL   =       
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM		=       -O2 -fast
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0
-FCDEBUG         =       # -g $(FCNOOPT) # -C -Ktrap=fp -traceback
-FORMAT_FIXED    =       -Mfixed
-FORMAT_FREE     =       -Mfree
-FCSUFFIX        =       
-BYTESWAPIO      =       -byteswapio
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO) $(OMP)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG) -Mnomod
-MODULE_SRCH_FLAG =     -module $(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      cpp CONFIGURE_CPPFLAGS -xassembler-with-cpp
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	-c
-CC_TOOLS        =      cc
-
-###########################################################
-#ARCH    Darwin (MACOS) intel compiler with icc #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       INTEL ($SFC/$SCC): Open MPI
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ifort
-SCC             =       icc
-CCOMP           =       icc
-DM_FC           =       mpif90
-DM_CC           =       mpicc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DMACOS -DNONSTANDARD_SYSTEM_FUNC  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -ip -DMACOS #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars -DMACOS
-# increase stack size; also note that for OpenMP, set environment OMP_STACKSIZE 4G or greater
-LDFLAGS_LOCAL   =       -ip -Wl,-stack_addr,0xF10000000 -Wl,-stack_size,0x64000000 #-xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-# added -fno-common at suggestion of R. Dubtsov as workaround for failing to link program_name
-FCBASEOPTS_NO_G =       -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) #-xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt -fno-common
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      cpp CONFIGURE_CPPFLAGS -xassembler-with-cpp
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	-c
-CC_TOOLS        =      cc
-
-###########################################################
-#ARCH    Darwin (MACOS) gfortran with gcc openmpi #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       GNU ($SFC/$SCC): Open MPI
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -fopenmp
-OMPCC           =       # -fopenmp
-SFC             =       gfortran
-SCC             =       gcc
-CCOMP           =       gcc
-DM_FC           =       mpif90
-DM_CC           =       mpicc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       #-fdefault-real-8
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR -DMACOS  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -c  -DMACOS
-LDFLAGS_LOCAL   =
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O2 -ftree-vectorize -funroll-loops
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT         =       -O0
-FCDEBUG         =       # -g $(FCNOOPT) # -fbacktrace -ggdb -fcheck=bounds,do,mem,pointer -ffpe-trap=invalid,zero,overflow
-FORMAT_FIXED    =       -ffixed-form
-FORMAT_FREE     =       -ffree-form -ffree-line-length-none
-FCSUFFIX        =       
-BYTESWAPIO      =       -fconvert=big-endian -frecord-marker=4
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      cpp CONFIGURE_CPPFLAGS -xassembler-with-cpp
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	-c
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686, PGI compiler with pgcc -f90= # serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       PGI ($SFC/$SCC): -f90=pgf90
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -mp -Minfo=mp -Mrecursive
-OMPCC           =       # -mp
-SFC             =       pgf90
-SCC             =       pgcc
-CCOMP           =       pgcc
-DM_FC           =       mpif90 -f90=pgf90
-DM_CC           =       mpicc -cc=pgcc
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -r$(RWORDSIZE) -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3
-LDFLAGS_LOCAL   =       
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3 #-fastsse -Mvect=noaltcode -Msmartalloc -Mprefetch=distance:8 -Mfprelaxed # -Minfo=all =Mneginfo=all
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0
-FCDEBUG         =       # -g $(FCNOOPT)  # -C -Ktrap=fp -traceback
-FORMAT_FIXED    =       -Mfixed
-FORMAT_FREE     =       -Mfree
-FCSUFFIX        =
-BYTESWAPIO      =       -byteswapio
-FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO) $(OMP)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     -module $(WRF_SRC_ROOT_DIR)/main
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4 -B 14000
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux x86_64 ppc64le i486 i586 i686 #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       INTEL ($SFC/$SCC): HSW/BDW
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ifort
-SCC             =       icc
-CCOMP           =       icc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_FUNC -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -ip -xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars -xCORE-AVX2
-LDFLAGS_LOCAL   =       -ip -xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common -xCORE-AVX2
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-FCBASEOPTS_NO_G =       -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) -xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt -fno-common -xCORE-AVX2
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-###########################################################
-#ARCH    Linux KNL x86_64 ppc64le i486 i586 i686 #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       INTEL ($SFC/$SCC): KNL MIC
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -openmp -fpp -auto
-OMPCC           =       # -openmp -fpp -auto
-SFC             =       ifort
-SCC             =       icc
-CCOMP           =       icc
-DM_FC           =       mpif90 -f90=$(SFC)
-DM_CC           =       mpicc -cc=$(SCC)
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -real-size `expr 8 \* $(RWORDSIZE)` -i4
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_FUNC -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -w -O3 -ip -xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -no-multibyte-chars -xMIC-AVX512
-LDFLAGS_LOCAL   =       -ip -xHost -fp-model fast=2 -no-prec-div -no-prec-sqrt -ftz -align all -fno-alias -fno-common -xMIC-AVX512
-CPLUSPLUSLIB    =       
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -O3
-FCREDUCEDOPT	=       $(FCOPTIM)
-FCNOOPT		=       -O0 -fno-inline -no-ip
-FCDEBUG         =       # -g $(FCNOOPT) -traceback # -fpe0 -check noarg_temp_created,bounds,format,output_conversion,pointers,uninit -ftrapuv -unroll0 -u
-FORMAT_FIXED    =       -FI
-FORMAT_FREE     =       -FR
-FCSUFFIX        =
-BYTESWAPIO      =       -convert big_endian
-RECORDLENGTH    =       -assume byterecl
-FCBASEOPTS_NO_G =       -ip -fp-model precise -w -ftz -align all -fno-alias $(FORMAT_FREE) $(BYTESWAPIO) -xHost -fp-model fast=2 -no-heap-arrays -no-prec-div -no-prec-sqrt -fno-common -xMIC-AVX512
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =     
-TRADFLAG        =      CONFIGURE_TRADFLAG
-CPP             =      /lib/cpp CONFIGURE_CPPFLAGS
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS		=	
-CC_TOOLS        =      $(SCC) 
-
-#insert new stanza here
-
-###########################################################
-#ARCH    Fujitsu FX10/FX100 Linux x86_64 SPARC64IXfx/SPARC64Xlfx, mpifrtpx and mpifccpx compilers #serial smpar dmpar dm+sm
-#
-DESCRIPTION     =       FUJITSU ($SFC/$SCC): FX10/FX100 SPARC64 IXfx/Xlfx
-DMPARALLEL      =       # 1
-OMPCPP          =       # -D_OPENMP
-OMP             =       # -Kopenmp
-OMPCC           =       # -Kopenmp
-SFC             =       frtpx
-SCC             =       fccpx
-CCOMP           =       fccpx
-DM_FC           =       mpifrtpx
-DM_CC           =       mpifccpx -DMPI2_THREAD_SUPPORT # -DMPI2_SUPPORT
-FC              =       CONFIGURE_FC
-CC              =       CONFIGURE_CC
-LD              =       $(FC)
-RWORDSIZE       =       CONFIGURE_RWORDSIZE
-PROMOTION       =       -CcdRR$(RWORDSIZE)
-ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
-CFLAGS_LOCAL    =       -Kfast -Xg -DSUN
-LDFLAGS_LOCAL   =
-CPLUSPLUSLIB    =
-ESMF_LDFLAG     =       $(CPLUSPLUSLIB)
-FCOPTIM         =       -Kfast
-FCREDUCEDOPT    =       $(FCOPTIM)
-FCNOOPT         =       -O0
-FCDEBUG         =       # -g $(FCNOOPT)
-FORMAT_FIXED    =       -Fixed
-FORMAT_FREE     =       -Free
-FCSUFFIX        =
-BYTESWAPIO      =
-FCBASEOPTS_NO_G =       -Kautoobjstack,ocl -fw $(FORMAT_FREE) $(BYTESWAPIO) $(OMP)
-FCBASEOPTS      =       $(FCBASEOPTS_NO_G) $(FCDEBUG)
-MODULE_SRCH_FLAG =
-TRADFLAG        =      -traditional
-CPP             =      /lib/cpp -P
-AR              =      ar
-ARFLAGS         =      ru
-M4              =      m4
-RANLIB          =      ranlib
-RLFLAGS         =
-CC_TOOLS        =      /usr/bin/gcc -Wall
-
-#insert new stanza before the Fujitsu block, keep Fujitsu at the end of the list
-###########################################################
-#ARCH  NULL
+thiscmd=$0
 
+FORTRAN_COMPILER_TIMER=""
+opt_level="-f"
+rword="-r4"
+print_usage=""
+chemistry=""
+wrf_core=""
+config_line="$0 "
+while [ $# -ge 1 ]; do
+    config_line="$config_line $1"
+    case $1 in
+      -d) opt_level="-d" ;;
+      -D) opt_level="-D" ;;
+      -s) opt_level="-s" ;;
+      -f) opt_level="-f" ;;
+      -h) print_usage="yes" ;;
+      -help) print_usage="yes" ;;
+      -os) shift ; WRF_OS=$1 ;;
+      -mach) shift ; WRF_MACH=$1 ;;
+      -r8) rword="-r8" ;;
+      -time) shift ; FORTRAN_COMPILER_TIMER=$1 ;;
+      chem) WRF_CHEM=1  ;;
+      kpp) WRF_KPP=1  ;;
+      radardfi) WRF_DFI_RADAR=1  ;;
+      wrfda) wrf_core=DA_CORE ;;
+      4dvar) wrf_core=4D_DA_CORE ;;
+      arw) wrf_core=EM_CORE  ;;
+      nmm) wrf_core=NMM_CORE  ;;
+      coamps) wrf_core=COAMPS_CORE  ;;
+      titan) WRF_TITAN=1 ; break ;;
+      mars) WRF_MARS=1 ; break ;;
+      venus) WRF_VENUS=1 ; break ;;
+      wrfplus) wrf_core=WRF_PLUS_CORE ; break ;;
+      *) echo "This option is not recognized: $1" ; exit 2 ;;
+    esac
+    shift
+done
+if [ -n "$print_usage" ] ; then
+  echo ' '
+  echo '*****************************************************************************'
+  echo usage: $thiscmd '[-d|-D|-s|-f|-os os|-mach mach|-time timecommand] [chem] [kpp]'
+  echo '-d    build with debugging information and no optimization'
+  echo '-D    build with -d AND floating traps, traceback, uninitialized variables'
+  echo '-r8   build with 8 byte reals'
+  echo '-help print this message'
+  echo '*****************************************************************************'
+  echo ' '
+  exit 
+fi
+
+if `pwd | grep ' ' > /dev/null ` ; then
+  echo '************************** W A R N I N G ************************************'
+  echo The current working directory has spaces in some components of its path name
+  echo and this may cause problems for your build.  This can occur, for example, on
+  echo Windows systems.  It is strongly recommended that you install WRF and other
+  echo related software such as NetCDF in directories whose path names contain no
+  echo white space.  On Win, for example, create and install in a directory under C:.
+  echo '*****************************************************************************'
+fi
+
+
+# lifted from the configure file for mpich; 00/03/10 jm
+#
+# Check for perl and perl version
+for p in perl5 perl
+do
+  # Extract the first word of "$p", so it can be a program name with args.
+  set dummy $p; ac_word=$2
+  if test -z "$ac_echo_n" ; then
+    ac_echo_n=yes
+    if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null; then
+      # Stardent Vistra SVR4 grep lacks -e, says ghazi@caip.rutgers.edu.
+      if (echo -n testing; echo 1,2,3) | sed s/-n/xn/ | grep xn >/dev/null; then
+    ac_n= ac_c='
+' ac_t='        '
+      else
+        ac_n=-n ac_c= ac_t=
+      fi
+    else
+      ac_n= ac_c='\c' ac_t=
+    fi
+    ac_echo_test=`echo foo 1>&1`
+    if test -z "$ac_echo_test" ; then
+       print_error "Your sh shell does not handle the output redirection"
+       print_error "1>&1 correctly.  Configure will work around this problem,"
+       print_error "but you should report the problem to your vendor."
+    fi
+  fi
+  if test -z "$ac_echo_test" -a 1 = 1 ; then
+    echo $ac_n "checking for $ac_word""... $ac_c"
+  else
+    echo $ac_n "checking for $ac_word""... $ac_c" 1>&1
+  fi
+  ac_prog_where=""
+  if test -n "$PERL"; then
+    ac_pg_PERL="$PERL" # Let the user override the test.
+  else
+    ac_first_char=`expr "$p" : "\(.\)"`
+    if test "$ac_first_char" = "/" -a -x "$p" ; then
+         ac_pg_PERL="$p"
+         ac_prog_where=$p
+    else
+        IFS="${IFS=     }"; ac_save_ifs="$IFS"; IFS="${IFS}:"
+        for ac_dir in $PATH; do
+          test -z "$ac_dir" && ac_dir=.
+          if test -f $ac_dir/$ac_word; then
+            ac_pg_PERL="$p"
+            ac_prog_where=$ac_dir/$ac_word
+            break
+          fi
+        done
+        IFS="$ac_save_ifs"
+    fi
+  fi;PERL="$ac_pg_PERL"
+  if test -n "$ac_prog_where" ; then
+    if test -z "$ac_echo_test" -a 1 = 1 ; then
+      echo "$ac_t""found $ac_prog_where ($PERL)"
+    else
+      echo "$ac_t""found $ac_prog_where ($PERL)" 1>&1
+    fi
+    PERLFULLPATH=$ac_prog_where  
+  else
+    if test -z "$ac_echo_test" -a 1 = 1 ; then
+      echo "$ac_t""no"
+    else
+      echo "$ac_t""no" 1>&1
+    fi
+  fi
+  test -n "$PERL" && break
+done
+
+if test -z "$PERL" ; then
+    # We have to set this outside of the loop lest the first failure in 
+    # PROGRAM_CHECK set the value (which then terminates the effect of the
+    # loop, since autoconf macros only set values that are null, they 
+    # don't override them
+    PERL=""
+fi
+
+if test -n "$PERL" ; then
+    PERL="$PERL"
+    
+    perlversion=`$PERL -v | grep 'This is perl' | \
+       sed -e 's/^.*v[a-z ]*\([0-9]\).*$/\1/'`
+
+    # Should do a test first for ch_p4 etc.
+    if test "$perlversion" -lt 5 ; then
+        echo "WRF build requires perl version 5, which configure did not find."
+        echo "You can set the environment variable PERL to contain the "
+        echo "location of perl version 5."
+        echo "Configure believes that $PERL is version $perlversion ."
+        PERL=""
+    fi
+    
+fi
+
+if  test -z "$NETCDF"  ; then
+  echo ' '
+  echo '*****************************************************************************'
+  echo 'No environment variable NETCDF set.'
+  echo 'Stopping'
+  echo '*****************************************************************************'
+  echo ' '
+  exit 5
+fi
+
+if  test -z "$NETCDF_classic"  ; then
+  export NETCDF4=1
+else
+  unset NETCDF4
+fi
+
+USENETCDFF=""
+USENETCDF=""
+if [ -n "$NETCDF" ] ; then
+  echo "Will use NETCDF in dir: $NETCDF"
+# Oh UNIDATA, why make it so hard ...
+  if [ -f "$NETCDF/lib/libnetcdff.a" -o -f "$NETCDF/lib/libnetcdff.so" ] ; then
+    USENETCDFF="-lnetcdff"
+  else
+    USENETCDFF=" "
+  fi
+  if [ -f "$NETCDF/lib/libnetcdf.a" -o -f "$NETCDF/lib/libnetcdf.so" ] ; then
+    USENETCDF="-lnetcdf"
+  else
+    USENETCDF=" "
+  fi
+  # for netCDF 4.2 and greater, the Fortran library is a separate install
+  if [ -z "$NETCDFF" ]; then
+    NETCDFF="$NETCDF"
+  fi
+  if [ -f "$NETCDFF/lib/libnetcdff.a" ] ; then
+    USENETCDFF="-L$NETCDFF/lib!-lnetcdff" # ! will be replaced with space
+  fi
+  export USENETCDF=$USENETCDF
+  export USENETCDFF=$USENETCDFF
+else
+  echo ' '
+  echo '*****************************************************************************'
+  echo 'No environment variable NETCDF set.'
+  echo 'Stopping'
+  echo '*****************************************************************************'
+  echo ' '
+  exit 6
+fi
+
+# If the user asked for classic netcdf, acquiesce to the request.
+
+if [ "`uname`" = "Linux" ] ; then
+  ans="`whereis nf-config`"
+elif [ "`uname`" = "Darwin" ] ; then
+  ans="`which nf-config`"
+else
+  ans=""
+# echo "Add in your architecture's uname and the command to find executables in the path"
+# exit 1
+fi
+if [ "$ans" = "nf-config:" -o "$ans" = "" ] ; then
+    export NETCDF_classic=1
+    unset NETCDF4
+else
+  if [ -n "$NETCDF_classic" ] ; then
+    if [ $NETCDF_classic -eq 1 ] ; then
+      unset  NETCDF4
+    else
+      unset  NETCDF_classic
+      export NETCDF4=1
+    fi
+  else
+    if [ "`nf-config --has-nc4`" = "yes" ] ; then
+      unset  NETCDF_classic
+      export NETCDF4=1
+    else
+      export NETCDF_classic=1
+      unset  NETCDF4
+    fi
+  fi
+fi
+
+if [ -z "$HDF5_PATH" ] ; then HDF5_PATH=''; fi
+if [ -z "$ZLIB_PATH" ] ; then ZLIB_PATH=''; fi
+if [ -z "$GPFS_PATH" ] ; then GPFS_PATH=''; fi
+if [ -z "$CURL_PATH" ] ; then CURL_PATH=''; fi
+
+if [ -n "$NETCDF4" ] ; then
+  if [ $NETCDF4 -eq 1 ] ; then
+    DEP_LIB_PATH=''
+    if [ -f $NETCDF/bin/nf-config ] ; then
+      nx_config="$NETCDF/bin/nf-config --flibs"
+      DEP_LIB_PATH="`$nx_config | awk '{for(i=1;i<=NF;i++){if(match($i, /-L.*/)) {print $i} } }'`"
+      CURL="`$nx_config | awk '{for(i=1;i<=NF;i++){if($i == "-lcurl") {print $i} } }'`"
+      GPFS="`$nx_config | awk '{for(i=1;i<=NF;i++){if($i == "-lgpfs") {print $i} } }'`"
+    fi
+    if [ "$DEP_LIB_PATH" = '' ] ; then
+      if [ -f $NETCDF/bin/nc-config ] ; then
+        nx_config="$NETCDF/bin/nc-config --libs"
+        DEP_LIB_PATH="`$nx_config | awk '{for(i=1;i<=NF;i++){if(match($i, /-L.*/)) {print $i} } }'`"
+        CURL="`$nx_config | awk '{for(i=1;i<=NF;i++){if($i == "-lcurl") {print $i} } }'`"
+        GPFS="`$nx_config | awk '{for(i=1;i<=NF;i++){if($i == "-lgpfs") {print $i} } }'`"
+        if [ "$CURL" != '' -a  "$CURL_PATH" = '' ] ; then
+           CURL_PATH="DEFAULT"
+        fi
+        if [ "$GPFS" != '' -a  "$GPFS_PATH" = '' ] ; then
+           GPFS_PATH="DEFAULT"
+        fi
+      fi
+    fi
+    for P in "$HDF5_PATH" "$ZLIB_PATH" "$GPFS_PATH" "$CURL_PATH"
+    do
+      if [ "$P" != '' -a "$P" != "DEFAULT" ] ; then 
+        if [ "${P#${P%?}}" = "/" ] ; then
+          P=`echo $P | sed 's/\/$//'`
+        fi
+        DEP_LIB_PATH="`echo $DEP_LIB_PATH | awk -v VAR=-L$P/lib '{for(i=1;i<=NF;i++){if ($i != VAR ) {print $i} } }'`"
+        DEP_LIB_PATH="$DEP_LIB_PATH -L$P/lib"
+      fi
+    done
+    if [ "${NETCDF#${NETCDF%?}}" = "/" ] ; then
+      NETCDF=`echo $NETCDF | sed 's/\/$//'`
+    fi
+    buff="`ls -l $NETCDF | sed 's/  */ /g'`"
+    while [ "`echo $buff | grep lib`" = "" -a "`echo $buff | grep '\->'`" != ""  ]
+    do
+      buff="`echo $buff | sed -e 's/->//' -e 's/  */ /g'`"
+      n=`echo $buff | wc -w`
+      lastword=`echo "$buff" | cut -d' ' -f$n | sed 's/\/$//'`
+      c="`echo $lastword | cut -c1`"
+      if [ "$c" == "/" ] ; then
+         NETCDF=$lastword
+      else
+        c="`echo $lastword | cut -c1-2`"
+        if [ "$c" = "./" ] ; then
+          lastword="echo $lastword | cut -c3-"
+        fi
+        NETCDF=${NETCDF%/*}/$lastword
+      fi
+      buff="`ls -l $NETCDF | sed 's/  */ /g'`"
+    done 
+    if [ "`echo $NETCDF | grep '..'`"  != "" ] ; then
+      buff="`echo $NETCDF | sed -e 's/^\///' -e 's/\// /g'`"
+      n=`echo $buff | wc -w`
+      i=1
+      while [ $i -le $n ]
+      do
+        if [ "`echo $buff | cut -d' ' -f$i`" = ".." ] ; then
+          m=$i 
+        fi
+        i=$(( $i + 1 ))
+      done
+      m=$(( $m + 1 ))
+      NETCDF=/"`echo $buff | cut -d' ' -f${m}- | sed 's/  */\//g'`"
+    fi
+    if [ "${DEP_LIB_PATH#${DEP_LIB_PATH%?}}" = "/" ] ; then
+      DEP_LIB_PATH=`echo $DEP_LIB_PATH | sed 's/\/$//'`
+    fi
+    DEP_LIB_PATH="`echo $DEP_LIB_PATH | awk -v VAR=-L$NETCDF/lib '{for(i=1;i<=NF;i++){if ($i != VAR ) {print $i} } }'`"
+  fi
+fi
+
+if [ -n "$PNETCDF" ] ; then
+  echo "Will use PNETCDF in dir: $PNETCDF"
+# experimental, so don't tease the user if it is not there
+#else
+#  echo "Will configure for use without NetCDF"
+fi
+
+if [ -n "$HDF5" ] ; then
+  echo "Will use HDF5 in dir: $HDF5"
+else
+  echo "HDF5 not set in environment. Will configure WRF for use without."
+fi
+
+if [ -n "$PHDF5" ] ; then
+  echo "Will use PHDF5 in dir: $PHDF5"
+else
+  echo "PHDF5 not set in environment. Will configure WRF for use without."
+fi
+
+if [ "$wrf_core" = "DA_CORE" -o "$wrf_core" = "4D_DA_CORE" ] ; then
+  if [ -n "$RTTOV" ] ; then
+    echo "Will use RTTOV in dir: $RTTOV"
+  else
+    echo "RTTOV not set in environment. Will configure WRFDA for use without."
+  fi
+fi
+
+# Set the "traditional" flag and the "cpp" flags
+
+TFL="-traditional-cpp"
+CFL="-P -nostdinc"
+
+if [ "$wrf_core" = "4D_DA_CORE" ]; then
+   if [ -n "$WRFPLUS_DIR" ] ; then
+      echo "Will use WRFPLUS in dir: $WRFPLUS_DIR"
+   else
+      echo "WRFPLUS_DIR not set in environment. Please compile WRFPLUS and set WRFPLUS_DIR."
+      exit
+   fi
+else
+   if [ -n "$WRFPLUS_DIR" ] ; then
+      echo 'Unsetting "$WRFPLUS_DIR" environment variable. Use "configure 4dvar" to configure for 4dvar compilation.'
+      unset WRFPLUS_DIR
+   fi
+fi
+# Users who are cross-compiling can set environment variable 
+# $WRF_OS to override the value normally obtained from `uname`.  
+# If $WRF_OS is set, then $WRF_MACH can also be set to override 
+# the value normally obtained from `uname -m`.  If $WRF_OS is 
+# set and $WRF_MACH is not set, then $WRF_MACH defaults to "ARCH".  
+# If $WRF_OS is not set then $WRF_MACH is ignored.  
+if [ -n "$WRF_OS" ] ; then
+  echo "${0}:  WRF operating system set to \"${WRF_OS}\" via environment variable \$WRF_OS"
+  os=$WRF_OS
+  mach="ARCH"
+  if [ -n "$WRF_MACH" ] ; then
+    echo "${0}:  WRF machine set to \"${WRF_MACH}\" via environment variable \$WRF_MACH"
+    mach=$WRF_MACH
+  fi
+else
+  # if the uname command exists, give it a shot and see if
+  # we can narrow the choices; otherwise, spam 'em
+  os="ARCH"
+  mach="ARCH"
+  type uname > /dev/null
+  if [ $? -eq 0 ] ; then
+    os=`uname`
+    if [ "$os" = "AIX" -o "$os" = "IRIX" -o "$os" = "IRIX64" -o "$os" = "SunOS" -o "$os" = "HP-UX"  -o "$os" = "Darwin" -o "$os" = "Interix" ] ; then
+      mach="ARCH"
+    else
+      xxx=`expr "$os" : '\(.........\).*'`
+      if [ "$xxx"  = "CYGWIN_NT" ] ; then
+        os=$xxx
+      fi
+      if [ "$os" = "OSF1" -o "$os" = "Linux" -o "$os" = "UNICOS/mp" -o "$os" = "UNIX_System_V" -o  "$os" = "CYGWIN_NT" ] ; then
+        mach=`uname -m`
+        if [ "$mach" = "ia64" -a -f /etc/sgi-release ] ; then
+          mach="Altix"
+        fi
+      else
+        os="ARCH"
+        mach="ARCH"
+      fi
+    fi
+  fi
+fi
+
+# an IBM specific hack to adjust the bmaxstack and bmaxdata options if addressing is 32-bit
+if [ "$os" = "AIX" ] ; then
+      if [ -z "$OBJECT_MODE" ] ; then
+         OBJECT_MODE=32
+         export OBJECT_MODE
+      fi
+      if [ "$OBJECT_MODE" = "32" ] ; then
+# the bang means nothing to sh in this context; use to represent spaces (perl will unbang)
+         ldflags=-bmaxstack:256000000!-bmaxdata:2048000000
+      fi
+fi
+
+# compile options that come from the environment, such as chemistry
+# the "!" is removed by Config.pl
+if [ -n "$WRF_HYDRO" ] ; then
+  if [ $WRF_HYDRO = 1 ] ; then
+      echo building WRF-HYDRO 
+      compileflags="${compileflags}!-DWRF_HYDRO"
+      echo $compileflags
+  fi
+fi
+
+# compile options that come from the environment, such as chemistry
+# the "!" is removed by Config.pl
+if [ -n "$WRF_MARS" ] ; then
+  if [ $WRF_MARS = 1 ] ; then
+    echo building WRF for Mars
+    compileflags="${compileflags}!-DPLANET!-DMARS"
+    echo $compileflags
+  fi
+fi
+
+if [ -n "$WRF_TITAN" ] ; then
+  if [ $WRF_TITAN = 1 ] ; then
+    echo building WRF for Titan
+    compileflags="${compileflags}!-DPLANET!-DTITAN"
+  fi
+fi
+
+if [ -n "$WRF_VENUS" ] ; then
+  if [ $WRF_VENUS = 1 ] ; then
+    echo building WRF for Venus
+    compileflags="${compileflags}!-DPLANET!-DVENUS"
+  fi
+fi
+if [ -n "$WRF_QUIETLY" ]; then
+  echo WRF_QUIETLY is now a synonym for WRF_LOG_BUFFERING
+  echo setting WRF_LOG_BUFFERING to 1...
+  export WRF_LOG_BUFFERING=1
+fi
+if [ -n "$WRF_LOG_BUFFERING" ]; then
+  if [ $WRF_LOG_BUFFERING = 1 ]; then
+    echo building WRF with support for buffering of log messages
+    compileflags="${compileflags}!-DWRF_LOG_BUFFERING=1"
+  fi
+fi
+if [ -n "$PNETCDF_QUILT" ]; then
+  echo Enabling quilt_pnc I/O server implementation.
+  compileflags="${compileflags}!-DPNETCDF_QUILT=1"
+fi
+if [ -n "$WRF_NMM_CORE" ]; then
+  if [ $WRF_NMM_CORE = 1 ]; then
+    export WRF_NMM_NEST=1
+    if [ -n "$HWRF" ]; then
+      if [ $HWRF = 1 ]; then
+        echo building WRF with HWRF option
+        compileflags="${compileflags}!-DHWRF=1"
+        if [ -n "$IDEAL_NMM_TC" ]; then
+          echo building WRF with NMM Idealized Tropical Cyclone option
+          compileflags="${compileflags}!-DIDEAL_NMM_TC=1"
+        fi
+      fi
+    fi
+    if [ -n "$IBM_REDUCE_BUG_WORKAROUND" ]; then
+      if [ $IBM_REDUCE_BUG_WORKAROUND = 1 ]; then
+        echo adding IBM_REDUCE_BUG_WORKAROUND flag for some IBM systems
+        compileflags="${compileflags}!-DIBM_REDUCE_BUG_WORKAROUND"
+      fi
+    fi
+  fi
+fi
+if [ -n "$WRF_DFI_RADAR" ] ; then
+  if [ $WRF_DFI_RADAR = 1 ] ; then
+    echo building WRF with radar dfi option
+    compileflags="${compileflags}!-DWRF_DFI_RADAR=1"
+  fi
+fi
+if [ -n "$WRF_CHEM" ] ; then
+  if [ $WRF_CHEM = 1 ] ; then
+    echo building WRF with chemistry option
+    compileflags="${compileflags}!-DWRF_CHEM!-DBUILD_CHEM=1"
+    if [ -n "$WRF_KPP" ] ; then
+      if [ $WRF_KPP = 1 ] ; then    
+        echo building WRF with KPP chemistry option
+        compileflags="${compileflags}!-DWRF_KPP"
+      fi
+    fi 
+  else
+    compileflags="${compileflags} "
+  fi
+else
+  compileflags="${compileflags} "
+fi
+
+if [ -n "$WRFPLUS" ] ; then
+  if [ $WRFPLUS = 1 ] ; then
+    echo building WRF for TL and AD
+    compileflags="!-DWRFPLUS"
+    echo $compileflags
+  fi
+fi
+
+if [ -n "$WRF_NMM_CORE" -a -n "$WRF_CHEM" ]; then
+  if [ $WRF_NMM_CORE = 1  -a  $WRF_CHEM = 1 ]; then
+    echo
+    echo "NMM is no longer compatible with the Chemistry option."
+    echo
+    # alphabetically: c=3, o=15, so co2 = 3+15+2 = 20
+    exit 20
+  fi
+fi
+
+type m4 > /dev/null
+if [ $? -ne 0 ] ; then
+  echo
+  echo "ERROR ERROR ERROR ERROR ERROR ERROR ERROR"
+  echo "'m4' utility not found! Can not configure."
+  echo
+  echo "If on an Ubuntu machine, use the command"
+  echo "         sudo apt-get install m4        "
+  echo "To download and install the 'm4' utility"
+  exit 1
+fi
+
+if command -v timex > /dev/null 2>&1; then
+  FORTRAN_COMPILER_TIMER=timex
+  echo "Will use 'timex' to report timing information"
+elif command -v time > /dev/null 2>&1; then
+  FORTRAN_COMPILER_TIMER=time
+  echo "Will use 'time' to report timing information"
+fi
+
+# Found perl, so proceed with configuration
+if test -n "$PERL" ; then
+   srch=`grep -i "^#ARCH.*$os" arch/configure.defaults | grep -i "$mach"`
+   if [ -n "$srch" ] ; then
+     $PERL arch/Config.pl -dmparallel=$COMMLIB -ompparallel=$OMP -perl=$PERL \
+          -netcdf=$NETCDF -netcdff=$NETCDFF -pnetcdf=$PNETCDF -hdf5=$HDF5 -phdf5=$PHDF5 -os=$os -mach=$mach -ldflags=$ldflags \
+          -compileflags=$compileflags -opt_level=$opt_level -USENETCDFF=$USENETCDFF -USENETCDF=$USENETCDF \
+          -time=$FORTRAN_COMPILER_TIMER -tfl="$TFL" -cfl="$CFL" -config_line="$config_line" \
+          -wrf_core=$wrf_core -gpfs=$GPFS_PATH -curl=$CURL_PATH -dep_lib_path="$DEP_LIB_PATH"
+     if test ! -f configure.wrf ; then
+       echo "configure.wrf not created! Exiting configure script..."
+       exit 1
+     fi
+     if [ "$opt_level" = "-d" ] ; then
+        sed -e 's/FCOPTIM[	 ]*=/& # /' -e '/FCDEBUG[	 ]*=/s/#//' configure.wrf > configure.wrf.edit
+        /bin/mv configure.wrf.edit configure.wrf
+     fi
+     if [ "$opt_level" = "-D" ] ; then
+        sed -e 's/FCOPTIM[	 ]*=/& # /' -e '/FCDEBUG[	 ]*=/s/#//g' configure.wrf > configure.wrf.edit
+        /bin/mv configure.wrf.edit configure.wrf
+     fi
+
+     # GNU has a funny way of doing promotion to real*8
+     if [ "$rword" = "-r8" ] ; then
+       srch=`grep -i "^SFC" configure.wrf | grep -i "gfortran"`
+       if [ -n "$srch" ] ; then
+         sed -e '/^PROMOTION/s/#//' \
+          -e '/^RWORDSIZE/s/$(NATIVE_RWORDSIZE)/8/' configure.wrf > configure.wrf.edit
+       else
+         sed -e '/^RWORDSIZE/s/$(NATIVE_RWORDSIZE)/8/' configure.wrf > configure.wrf.edit
+       fi
+       /bin/mv configure.wrf.edit configure.wrf
+     fi
+   else
+     echo '*********************************************************'
+     echo '***              ERROR ERROR ERROR ERROR              ***'
+     echo '***                                                   ***'
+     echo '*** Configuration not found in configure.defaults     ***'
+     echo '*********************************************************'
+     exit 2
+   fi
+fi
+
+if test -f configure.wrf ; then
+# new dec 2005.  test what fseek is supported (needed for share/landread.c to work correctly)
+  echo testing for fseeko and fseeko64
+  /bin/rm -f tools/fseeko_test tools/fseeko64_test
+  ( make fseek_test 2> /dev/null ) 1> /dev/null
+  if [ "$os" = "Darwin" ] ; then
+    # fseeko64 does not exist under Darwin fseeko does. Remove the 0 length executable
+    # file that might get generated anyway, even though the compiler complains about missing reference.
+    /bin/rm -f tools/fseeko64_test 
+  fi
+  if test -x tools/fseeko64_test ; then
+    ( tools/fseeko64_test 2> /dev/null ) 1> /dev/null
+    if [ $? = 0 ] ; then
+       echo fseeko64 is supported
+       sed '/^CC .*=/s/$/ -DFSEEKO64_OK /' configure.wrf > xx$$ ; /bin/mv xx$$ configure.wrf
+    fi
+  else
+    if test -x tools/fseeko_test ; then
+      ( tools/fseeko_test 2> /dev/null ) 1> /dev/null
+      if [ $? = 0 ] ; then
+        echo fseeko is supported and handles 64 bit offsets
+        sed '/^CC .*=/s/$/ -DFSEEKO_OK /' configure.wrf > xx$$ ; /bin/mv xx$$ configure.wrf
+      else
+        echo neither fseeko64 nor fseeko with 64 bit offsets works, landread will be compiled with fseek
+        echo but may not work correctly for very high resolution terrain datasets
+      fi
+    else
+      echo neither fseeko64 nor fseeko with 64 bit offsets works, landread will be compiled with fseek
+      echo but may not work correctly for very high resolution terrain datasets
+    fi
+  fi
+fi
+
+echo "------------------------------------------------------------------------"
+sed -e '1,/#### Architecture specific settings ####/d' -e '/^externals/,$d' configure.wrf
+
+echo "------------------------------------------------------------------------"
+echo "Settings listed above are written to configure.wrf."
+echo "If you wish to change settings, please edit that file."
+echo "If you wish to change the default options, edit the file:"
+echo "     arch/configure.defaults"
+
+if test -n "$NETCDFF" ; then
+  if [ ! -f $NETCDFF/include/netcdf.inc ] ; then
+    echo
+    echo "Error : Not found $NETCDFF/include/netcdf.inc"
+    echo "        Please check this installation of NetCDF and re-run this configure script"
+    exit -1
+  fi
+  grep nf_format_64bit $NETCDFF/include/netcdf.inc > /dev/null
+  configure_aaaa=$? ; export configure_aaaa
+  if [ $configure_aaaa -a -z "$WRFIO_NCD_NO_LARGE_FILE_SUPPORT" ] ; then
+    echo "NetCDF users note:"
+    echo " This installation of NetCDF supports large file support.  To DISABLE large file" 
+    echo " support in NetCDF, set the environment variable WRFIO_NCD_NO_LARGE_FILE_SUPPORT"
+    echo " to 1 and run configure again. Set to any other value to avoid this message."
+  fi
+fi
+echo "  "
+
+if [ "$wrf_core" = "DA_CORE" -o "$wrf_core" = "WRF_PLUS_CORE" -o "$wrf_core" = "4D_DA_CORE" ]; then
+  if [ "`grep '^SFC' configure.wrf | grep -i 'gfortran'`" != "" -o "`grep '^SFC' configure.wrf | grep -i 'frtpx'`" != "" ]; then
+    echo "WRFDA/WRFPLUS using gfortran/frtpx needs realsize=8"
+    sed -e '/^PROMOTION.*=/s/#//' configure.wrf > configure.wrf.edit
+    /bin/mv configure.wrf.edit configure.wrf
+  fi
+fi
+
+if [ -n "$WRFPLUS" ] ; then
+  if [ $WRFPLUS = 1 ] ; then
+    if [ `grep '^SFC' configure.wrf | cut -d= -f2` = "gfortran" ]; then
+      echo "WRFPLUS using gfortran needs realsize=8"
+      sed -e '/^PROMOTION.*=/s/#//' configure.wrf > configure.wrf.edit
+      /bin/mv configure.wrf.edit configure.wrf
+    fi
+  fi
+fi
+
+#Checking cross-compiling capability for some particular environment 
+#on Linux and Mac box
+
+if [ $os = "Linux" -o $os = "Darwin" ]; then
+
+  SFC=`grep '^SFC' configure.wrf | awk '{print $3}'`
+  SCC=`grep '^SCC' configure.wrf | awk '{print $3}'`
+  CCOMP=`grep '^CCOMP' configure.wrf | awk '{print $3}'`
+
+  SFC="`type $SFC 2>/dev/null | awk '{print $NF}' | sed -e 's/(//g;s/)//g'`"
+  SCC="`type $SCC 2>/dev/null | awk '{print $NF}' | sed -e 's/(//g;s/)//g'`"
+  CCOMP="`type $CCOMP 2>/dev/null | awk '{print $NF}' | sed -e 's/(//g;s/)//g'`"
+
+  foo=foo_$$
+
+cat > ${foo}.c <<EOF 
+ int main(int argc, char ** argv)
+ {
+     return (0);
+ }
+EOF
+
+cat > ${foo}.f <<EOF
+          program test_exit
+            integer :: STATUS = 0
+            call EXIT(STATUS)
+          end program test_exit
+EOF
+
+  # do not do this test for MIC, which cross compiles
+  if [ -z "`grep 'SCC.*mmic' configure.wrf`" ] ; then
+    # Detecting whether if mpi compiler wrapper supports -cc/-f90 options
+    if [ -z "`grep -i -E '^DMPARALLEL[ \t]*=.*#' configure.wrf`" ] ; then
+      mpicc -cc=$SCC -o ${foo} ${foo}.c > /dev/null 2>&1
+      if [ $? != 0 ]; then
+        sed 's/-cc=$(SCC)//' configure.wrf > configure.wrf.edit
+        mv configure.wrf.edit configure.wrf
+      fi
+      rm ${foo} ${foo}.o 2> /dev/null
+      mpif90 -f90=$SFC -o ${foo} ${foo}.f > /dev/null 2>&1
+      if [ $? != 0 ]; then
+        sed 's/-f90=$(SFC)//'  configure.wrf > configure.wrf.edit
+        mv configure.wrf.edit configure.wrf
+      fi
+      rm ${foo} ${foo}.o 2> /dev/null
+    fi
+  fi
+
+  if [ -e $NETCDF/lib/libnetcdf.a -a "$SFC" != "" -a "$SCC" != "" -a "$CCOMP" != "" ]; then
+
+    SFC_MULTI_ABI=0
+    SCC_MULTI_ABI=0
+    CCOMP_MULTI_ABI=0
+    CROSS_COMPILING=0
+
+    echo
+    echo Testing for NetCDF, C and Fortran compiler
+    echo
+
+    ar p $NETCDF/lib/libnetcdf.a `ar t $NETCDF/lib/libnetcdf.a | grep -E '\.o' | head -n 1 | sed 's/://'` > ${foo}.o
+    netcdf_arch="`file ${foo}.o | grep -o -E '[0-9]{2}-bit|i386'`"
+    rm ${foo}.o
+
+    $SFC -o ${foo} ${foo}.f > /dev/null 2>&1 
+    SFC_arch="`file ${foo} | grep -o -E '[0-9]{2}-bit|i386'`"
+    rm ${foo} ${foo}.o 2> /dev/null
+
+    $SCC -o ${foo} ${foo}.c > /dev/null 2>&1
+    SCC_arch="`file ${foo} | grep -o -E '[0-9]{2}-bit|i386'`"
+    CCOMP_arch=$SCC_arch
+    rm ${foo} ${foo}.o 2> /dev/null
+
+    if [ "$SCC" != "$CCOMP" ]; then
+      $CCOMP -o ${foo} ${foo}.c > /dev/null 2>&1
+      CCOMP_arch="`file ${foo} | grep -o -E '[0-9]{2}-bit|i386'`"
+      rm ${foo} ${foo}.o 2> /dev/null
+    fi
+
+    if [ "$SFC_arch" = "" -o "$SCC_arch" = "" -o "$CCOMP_arch" = "" ]; then
+      echo "  One of compilers testing failed!"
+      echo "  Please check your compiler"
+      echo 
+      rm -f ${foo} ${foo}.[cfo] 2> /dev/null
+      exit
+    else
+      cp configure.wrf configure.wrf.edit
+    fi
+
+    case $netcdf_arch in
+
+      32-bit|i386 )
+
+      if [ "$SFC_arch" = "64-bit" ] ; then
+        CROSS_COMPILING=1
+        $SFC -m32 -o ${foo} ${foo}.f > /dev/null 2>&1
+        if [ $? = 0 ]; then
+          SFC_MULTI_ABI=1
+          sed '/^SFC.*=/s/$/ -m32/' configure.wrf.edit > configure.wrf.tmp
+          mv configure.wrf.tmp configure.wrf.edit
+        fi
+      fi
+      if [ "$SCC_arch" = "64-bit" ] ; then
+        CROSS_COMPILING=1
+        $SCC -m32 -o ${foo} ${foo}.c > /dev/null 2>&1
+        if [ $? = 0 ]; then
+          SCC_MULTI_ABI=1
+          sed '/^SCC.*=/s/$/ -m32/' configure.wrf.edit > configure.wrf.tmp
+          mv configure.wrf.tmp  configure.wrf.edit
+        fi
+      fi
+
+      if [ "$CCOMP_arch" = "64-bit" ] ; then
+        CROSS_COMPILING=1
+        if [ "$CCOMP" != "$SCC" ]; then
+          $CCOMP -m32 -o ${foo} ${foo}.c > /dev/null 2>&1
+          if [ $? = 0 ]; then
+            CCOMP_MULTI_ABI=1
+            sed '/^CCOMP/ s/$/ -m32/' configure.wrf.edit > configure.wrf.tmp
+            mv configure.wrf.tmp  configure.wrf.edit
+          fi
+        else
+          CCOMP_MULTI_ABI=1
+          sed '/^CCOMP/ s/$/ -m32/' configure.wrf.edit > configure.wrf.tmp
+          mv configure.wrf.tmp  configure.wrf.edit
+        fi
+      fi
+
+      if [ $CROSS_COMPILING -eq 1 ] ; then
+        echo NOTE:
+        echo This installation of NetCDF is 32-bit
+        if [ \( $SFC_MULTI_ABI -ne 1 -a "$SFC_arch" = "64-bit" \) \
+             -o \( $SCC_MULTI_ABI -ne 1 -a "$SCC_arch" = "64-bit" \) \
+             -o \( $CCOMP_MULTI_ABI -ne 1 -a "$CCOMP_arch" = "64-bit" \) ] ; then
+             rm configure.wrf.edit
+             echo One of compilers is 64-bit and doesn\'t support cross-compiling.
+             echo Please check your NETCDF lib and compiler
+        else
+          echo -m32 is appended to configure.wrf
+          echo It will be forced to build in 32-bit.
+          echo If you don\'t want 32-bit binaries, please use 64-bit NetCDF, and re-run the configure script.
+        fi
+      fi
+      ;;
+
+      64-bit )
+
+      if [ "$SFC_arch" = "32-bit" -o "$SFC_arch" = "i386" ] ; then
+        CROSS_COMPILING=1
+        $SFC -m64 -o ${foo} ${foo}.f > /dev/null 2>&1
+        if [ $? = 0 ]; then
+          SFC_MULTI_ABI=1
+          sed '/^SFC.*=/s/$/ -m64/' configure.wrf.edit > configure.wrf.tmp
+          mv configure.wrf.tmp configure.wrf.edit
+        fi
+      fi
+      if [ "$SCC_arch" = "32-bit" -o "$SCC_arch" = "i386" ] ; then
+        CROSS_COMPILING=1
+        $SCC -m64 -o ${foo} ${foo}.c > /dev/null 2>&1
+        if [ $? = 0 ]; then
+          SCC_MULTI_ABI=1
+          sed '/^SCC.*=/s/$/ -m64/' configure.wrf.edit > configure.wrf.tmp
+          mv configure.wrf.tmp configure.wrf.edit
+        fi
+      fi
+
+      if [ "$CCOMP_arch" = "32-bit" -o "$CCOMP_arch" = "i386" ] ; then
+        CROSS_COMPILING=1
+        if [ "$CCOMP" != "$SCC" ]; then
+          $CCOMP -m64 -o ${foo} ${foo}.c > /dev/null 2>&1
+          if [ $? = 0 ]; then
+            CCOMP_MULTI_ABI=1
+            sed '/^CCOMP/ s/$/ -m64/' configure.wrf.edit > configure.wrf.tmp
+            mv configure.wrf.tmp  configure.wrf.edit
+          fi
+        else
+          CCOMP_MULTI_ABI=1
+          sed '/^CCOMP/ s/$/ -m64/' configure.wrf.edit > configure.wrf.tmp
+          mv configure.wrf.tmp  configure.wrf.edit
+        fi
+      fi
+
+      if [ $CROSS_COMPILING -eq 1 ] ; then
+        echo NOTE:
+        echo This installation of NetCDF is 64-bit
+        if [ \( $SFC_MULTI_ABI -ne 1 -a "$SFC_arch" != "64-bit" \) \
+            -o \( $SCC_MULTI_ABI -ne 1 -a "$SCC_arch" != "64-bit" \) \
+            -o \( $CCOMP_MULTI_ABI -ne 1 -a "$CCOMP_arch" != "64-bit" \) ]; then
+            rm configure.wrf.edit
+            echo One of Compilers is 32-bit and doesn\'t support cross-compiling.
+            echo Please check your NetCDF lib and compiler
+        else
+          echo -m64 is appended to configure.wrf
+          echo It will be forced to build in 64-bit. 
+          echo If you don\'t want 64-bit binaries, please use 32-bit NetCDF, and re-run the configure script.
+        fi
+      fi
+      ;;
+    esac
+
+    if [ -e configure.wrf.edit ]; then 
+      mv configure.wrf.edit configure.wrf
+    fi
+
+    if [ $CROSS_COMPILING -eq 0 ] ; then
+      echo "This installation of NetCDF is $netcdf_arch"
+      echo "                 C compiler is $SCC_arch"
+      echo "           Fortran compiler is $SFC_arch"
+      echo "              It will build in $netcdf_arch"
+    fi
+    echo
+  fi
+  rm -f ${foo} ${foo}.[cfo] 2> /dev/null
+fi
+
+# testing for Fortran 2003 IEEE signaling features
+make fortran_2003_ieee_test > tools/fortran_2003_ieee_test.log 2>&1
+rm -f tools/fortran_2003_ieee_test.log
+retval=-1
+if [ -f tools/fortran_2003_ieee_test.exe ] ; then
+  retval=0
+fi
+if [ $retval -ne 0 ] ; then
+  sed -e '/^ARCH_LOCAL/s/$/ -DNO_IEEE_MODULE/' configure.wrf > configure.wrf.edit
+  mv configure.wrf.edit configure.wrf
+  echo " "
+  echo " "
+  echo "************************** W A R N I N G ************************************"
+  echo " "
+  echo "There are some Fortran 2003 features in WRF that your compiler does not recognize"
+  echo "The IEEE signaling call has been removed.  That may not be enough."
+  echo " "
+  echo "*****************************************************************************"
+fi
+
+# testing for Fortran 2003 ISO_C features
+make fortran_2003_iso_c_test > tools/fortran_2003_iso_c_test.log 2>&1
+rm -f tools/fortran_2003_iso_c_test.log
+retval=-1
+if [ -f tools/fortran_2003_iso_c_test.exe ] ; then
+  retval=0
+fi
+if [ $retval -ne 0 ] ; then
+  sed -e '/^ARCH_LOCAL/s/$/ -DNO_ISO_C_SUPPORT/' configure.wrf > configure.wrf.edit
+  mv configure.wrf.edit configure.wrf
+  echo " "
+  echo " "
+  echo "************************** W A R N I N G ************************************"
+  echo " "
+  echo "There are some Fortran 2003 features in WRF that your compiler does not recognize"
+  echo "The routines that utilize ISO_C support have been stubbed out. "
+  echo "That may not be enough."
+  echo " "
+  echo "*****************************************************************************"
+fi
+
+# testing for Fortran 2003 FLUSH features
+make fortran_2003_flush_test > tools/fortran_2003_flush_test.log 2>&1
+rm -f tools/fortran_2003_flush_test.log
+retval=-1
+if [ -f tools/fortran_2003_flush_test.exe ] ; then
+  retval=0
+fi
+if [ $retval -ne 0 ] ; then
+  make fortran_2003_fflush_test > tools/fortran_2003_fflush_test.log 2>&1
+  rm -f tools/fortran_2003_fflush_test.log
+  retval=-1
+  if [ -f tools/fortran_2003_fflush_test.exe ] ; then
+    retval=0
+  fi
+  if [ $retval -eq 0 ] ; then
+    sed -e '/^ARCH_LOCAL/s/$/ -DUSE_FFLUSH/' configure.wrf > configure.wrf.edit
+    mv configure.wrf.edit configure.wrf
+    echo " "
+    echo " "
+    echo "************************** W A R N I N G ************************************"
+    echo " "
+    echo "There are some Fortran 2003 features in WRF that your compiler does not recognize"
+    echo "The standard FLUSH routine has been replaced by FFLUSH."
+    echo "That may not be enough."
+    echo " "
+    echo "*****************************************************************************"
+  fi
+  if [ $retval -ne 0 ] ; then
+    sed -e '/^ARCH_LOCAL/s/$/ -DNO_FLUSH_SUPPORT/' configure.wrf > configure.wrf.edit
+    mv configure.wrf.edit configure.wrf
+    echo " "
+    echo " "
+    echo "************************** W A R N I N G ************************************"
+    echo " "
+    echo "There are some Fortran 2003 features in WRF that your compiler does not recognize"
+    echo "The standard FLUSH routine has been stubbed out."
+    echo "That may not be enough."
+    echo " "
+    echo "*****************************************************************************"
+  fi
+fi
+
+# testing for Fortran 2008 intrinsic gamma function
+make fortran_2008_gamma_test > tools/fortran_2008_gamma.log 2>&1
+rm -f tools/fortran_2008_gamma.log
+retval=-1
+if [ -f tools/fortran_2008_gamma_test.exe ] ; then
+  retval=0
+fi
+if [ $retval -ne 0 ] ; then
+  sed -e '/^ARCH_LOCAL/s/$/ -DNO_GAMMA_SUPPORT/' configure.wrf > configure.wrf.edit
+  mv configure.wrf.edit configure.wrf
+  echo " "
+  echo " "
+  echo "************************** W A R N I N G ************************************"
+  echo " "
+  echo "There are some Fortran 2008 features in WRF that your compiler does not recognize"
+  echo "The intrinsic gamma function is not available, required by some schemes."
+  echo "That code is stubbbed out, and those schemes are unavailable at run-time."
+  echo " "
+  echo "*****************************************************************************"
+fi
+
+# testing for netcdf4 IO features
+if [ -n "$NETCDF4" ] ; then
+  if [ $NETCDF4 -eq 1 ] ; then
+    make nc4_test > tools/nc4_test.log 2>&1
+    retval=-1
+    if  [ -f tools/nc4_test.exe ] ; then
+      retval=0
+      rm -f tools/nc4_test.log
+    fi
+    if [ $retval -ne 0  ] ; then
+      echo "************************** W A R N I N G ************************************"
+      echo "NETCDF4 IO features are requested, but this installation of NetCDF           "
+      echo "  $NETCDF"
+      echo "DOES NOT support these IO features.                                          "
+      echo
+      echo "Please make sure NETCDF version is 4.1.3 or later and was built with         "
+      echo "--enable-netcdf4                                                             "
+      echo
+      echo "OR set NETCDF_classic variable                                               "
+      echo "   bash/ksh : export NETCDF_classic=1
+      echo "        csh : setenv NETCDF_classic 1
+      echo 
+      echo "Then re-run this configure script                                            "
+      echo
+      echo "!!! configure.wrf has been REMOVED !!!"
+      echo
+      echo "*****************************************************************************"
+      rm -f configure.wrf
+    else
+      echo "*****************************************************************************"
+      echo "This build of WRF will use NETCDF4 with HDF5 compression"
+      echo "*****************************************************************************"
+      echo " "
+    fi
+  fi
+else
+  echo "*****************************************************************************"
+  echo "This build of WRF will use classic (non-compressed) NETCDF format"
+  echo "*****************************************************************************"
+  echo " "
+fi
